var searchIndex = JSON.parse('{\
"pe_util":{"doc":"pe-util","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["PE","address_of_entry_point","base_address","base_of_code","borrow","borrow_mut","check_sum","clone","clone_into","data_directory","data_directory_mut","dll_characteristics","dos_header","dos_header_mut","file_alignment","file_header","file_header_mut","from","from_address","from_address_assume_mapped","from_address_unchecked","from_ptr","from_ptr_unchecked","from_slice","from_slice_assume_mapped","from_slice_unchecked","get_export_name","get_export_rva","get_exports","get_function_ordinal","get_pe_resource","image_base","into","is_64bit","is_mapped","loader_flags","magic","major_image_version","major_linker_version","major_operating_system_version","major_subsystem_version","minor_image_version","minor_linker_version","minor_operating_system_version","minor_subsystem_version","nt_headers","number_of_rva_and_sizes","optional_header","optional_header_mut","rva_to_foa","section_alignment","section_headers","section_headers_mut","set_address_of_entry_point","set_base_of_code","set_check_sum","set_dll_characteristics","set_file_alignment","set_image_base","set_loader_flags","set_magic","set_major_image_version","set_major_linker_version","set_major_operating_system_version","set_major_subsystem_version","set_minor_image_version","set_minor_linker_version","set_minor_operating_system_version","set_minor_subsystem_version","set_number_of_rva_and_sizes","set_section_alignment","set_signature","set_size_of_code","set_size_of_headers","set_size_of_heap_commit","set_size_of_heap_reserve","set_size_of_image","set_size_of_initialized_data","set_size_of_stack_commit","set_size_of_stack_reserve","set_size_of_uninitialized_data","set_subsystem","set_win32_version_value","signature","size_of","size_of","size_of_code","size_of_headers","size_of_heap_commit","size_of_heap_reserve","size_of_image","size_of_initialized_data","size_of_stack_commit","size_of_stack_reserve","size_of_uninitialized_data","subsystem","to_owned","try_from","try_into","type_id","validate","win32_version_value"],"q":[[0,"pe_util"],[102,"core::clone"],[103,"std::io::error"],[104,"alloc::string"],[105,"core::option"],[106,"alloc::vec"],[107,"core::result"],[108,"core::any"]],"d":["A pointer sized type that allows the user to read a buffer …","","Returns the base address of the PE .","","","","","","","","","","Returns a reference to the start of the PE file as an …","Returns a reference to the start of the PE file as an …","","","","Returns the argument unchanged.","Returns a PE from a <code>usize</code> with the value of the address of …","Returns a <code>PE</code> from a <code>usize</code> with the value of the address of …","Returns a PE from a <code>usize</code> with the value of the address of …","Returns a <code>PE</code> from a <code>*const u8</code> that points to the start of …","Returns a <code>PE</code> from a <code>*const u8</code> that points to the start of …","Returns a <code>PE</code> from a slice that starts with a valid PE …","Returns a <code>PE</code> from a slice that shares the lifetime of the …","Returns a <code>PE</code> from a slice that starts with a valid PE …","Returns the name of the function with the given ordinal …","Takes in a FunctionId and looks up the function in the …","Returns a <code>Vec&lt;&amp;str&gt;</code> that contains the names all the …","Returns the ordinal of the function with the given name …","Looks up the Resource entry with the provided category and …","","Calls <code>U::from(self)</code>.","Returns true if the architecture for the PE is 64-bit, or …","Returns true if the PE is mapped into memory, or false is …","","","","","","","","","","","Returns the NtHeaders variant of the PE structure.","","","","Takes the <code>Relative Virtual Address</code> and returns the …","","Returns the section headers for the PE file as a slice.","Returns the section headers for the PE file as a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that the memory pointed to by <code>self.pointer</code> is a …",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[[1,[[0,[-1]]]]],2,[]],[[[1,[-1]]],3,[]],[[[1,[[0,[-1]]]]],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[-1]]],[[1,[-1]]],4],[[-1,-2],5,[],[]],[[[1,[[0,[-1]]]]],[[6,[0]]],[]],[[[1,[[0,[0]]]]],[[6,[0]]]],[[[1,[[0,[-1]]]]],7,[]],0,0,[[[1,[[0,[-1]]]]],2,[]],0,0,[-1,-1,[]],[3,[[8,[[1,[0]]]]]],[[3,9],[[1,[0]]]],[3,[[1,[0]]]],[10,[[8,[[1,[0]]]]]],[10,[[1,[0]]]],[[[6,[10]]],[[8,[[1,[0]]]]]],[[[6,[10]],9],[[1,[0]]]],[[[6,[10]]],[[1,[0]]]],[[[1,[0]],7],[[12,[11]]]],0,[[[1,[0]]],[[12,[[14,[13]]]]]],[[[1,[0]],[6,[10]]],7],[[[1,[0]],2,2],[[12,[[6,[10]]]]]],[[[1,[[0,[-1]]]]],15,[]],[-1,-2,[],[]],[[[1,[-1]]],9,[]],[[[1,[-1]]],9,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],10,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],10,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[[0,[-1]]]]],7,[]],[[[1,[0]]],[[1,[0]]]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[0]]],[[1,[[0,[0]]]]]],[[[1,[0]]],[[1,[[0,[0]]]]]],[[[1,[0]],2],[[12,[2]]]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[0]]],[[6,[0]]]],[[[1,[0]]],[[6,[0]]]],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],15],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],10],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],10],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[0]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],15],5],[[[1,[[0,[0]]]],15],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],15],5],[[[1,[[0,[0]]]],15],5],[[[1,[[0,[0]]]],2],5],[[[1,[[0,[0]]]],7],5],[[[1,[[0,[0]]]],2],5],[[[1,[0]]],2],[[[1,[0]]],3],[[[1,[[0,[-1]]]]],3,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],15,[]],[[[1,[[0,[-1]]]]],15,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],15,[]],[[[1,[[0,[-1]]]]],15,[]],[[[1,[[0,[-1]]]]],2,[]],[[[1,[[0,[-1]]]]],7,[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[[[1,[0]]],9],[[[1,[[0,[-1]]]]],2,[]]],"c":[],"p":[[3,"PE",0],[15,"u32"],[15,"usize"],[8,"Clone",102],[15,"tuple"],[15,"slice"],[15,"u16"],[6,"Result",103],[15,"bool"],[15,"u8"],[3,"String",104],[4,"Option",105],[15,"str"],[3,"Vec",106],[15,"u64"],[4,"Result",107],[3,"TypeId",108]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
